# Makefile.in generated by automake 1.9.6 from Makefile.am.
# libantlr/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/cec
pkglibdir = $(libdir)/cec
pkgincludedir = $(includedir)/cec
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
subdir = libantlr
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	AUTHORS COPYING
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
libantlr_a_AR = $(AR) $(ARFLAGS)
libantlr_a_LIBADD =
am_libantlr_a_OBJECTS = ANTLRUtil.$(OBJEXT) ASTFactory.$(OBJEXT) \
	ASTNULLType.$(OBJEXT) ASTRefCount.$(OBJEXT) BaseAST.$(OBJEXT) \
	BitSet.$(OBJEXT) CharBuffer.$(OBJEXT) CharScanner.$(OBJEXT) \
	CommonAST.$(OBJEXT) CommonASTWithHiddenTokens.$(OBJEXT) \
	CommonHiddenStreamToken.$(OBJEXT) CommonToken.$(OBJEXT) \
	InputBuffer.$(OBJEXT) LLkParser.$(OBJEXT) \
	MismatchedCharException.$(OBJEXT) \
	MismatchedTokenException.$(OBJEXT) \
	NoViableAltException.$(OBJEXT) \
	NoViableAltForCharException.$(OBJEXT) Parser.$(OBJEXT) \
	RecognitionException.$(OBJEXT) String.$(OBJEXT) \
	TokenBuffer.$(OBJEXT) Token.$(OBJEXT) \
	TokenStreamBasicFilter.$(OBJEXT) \
	TokenStreamHiddenTokenFilter.$(OBJEXT) \
	TokenStreamSelector.$(OBJEXT) TreeParser.$(OBJEXT)
libantlr_a_OBJECTS = $(am_libantlr_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libantlr_a_SOURCES)
DIST_SOURCES = $(libantlr_a_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/missing --run tar
ANTLR = 
AUTOCONF = ${SHELL} /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/missing --run autoconf
AUTOHEADER = ${SHELL} /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/missing --run autoheader
AUTOMAKE = ${SHELL} /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"cec\" -DVERSION=\"0.4\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBEXPAT=1 
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = .exe
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lexpat 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/missing --run makeinfo
NOTANGLE = 
NOWEAVE = 
OBJEXT = o
PACKAGE = cec
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.4
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
datadir = ${prefix}/share
exec_prefix = ${prefix}
host_alias = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /c/Users/Jairo/Downloads/cec-0.4.tar/cec-0.4/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
noinst_LIBRARIES = libantlr.a
EXTRA_DIST = AUTHORS COPYING README
libantlr_a_SOURCES = \
	antlr/ANTLRException.hpp  \
	antlr/ANTLRUtil.hpp  \
	antlr/ASTArray.hpp  \
	antlr/ASTFactory.hpp  \
	antlr/AST.hpp  \
	antlr/ASTNULLType.hpp  \
	antlr/ASTPair.hpp  \
	antlr/ASTRefCount.hpp  \
	antlr/BaseAST.hpp  \
	antlr/BitSet.hpp  \
	antlr/CharBuffer.hpp  \
	antlr/CharInputBuffer.hpp  \
	antlr/CharScanner.hpp  \
	antlr/CharStreamException.hpp  \
	antlr/CharStreamIOException.hpp  \
	antlr/CircularQueue.hpp  \
	antlr/CommonAST.hpp  \
	antlr/CommonASTWithHiddenTokens.hpp  \
	antlr/CommonHiddenStreamToken.hpp  \
	antlr/CommonToken.hpp  \
	antlr/config.hpp  \
	antlr/InputBuffer.hpp  \
	antlr/IOException.hpp  \
	antlr/LexerSharedInputState.hpp  \
	antlr/LLkParser.hpp  \
	antlr/MismatchedCharException.hpp  \
	antlr/MismatchedTokenException.hpp  \
	antlr/NoViableAltException.hpp  \
	antlr/NoViableAltForCharException.hpp  \
	antlr/Parser.hpp  \
	antlr/ParserSharedInputState.hpp  \
	antlr/RecognitionException.hpp  \
	antlr/RefCount.hpp  \
	antlr/SemanticException.hpp  \
	antlr/String.hpp  \
	antlr/TokenBuffer.hpp  \
	antlr/Token.hpp  \
	antlr/TokenStreamBasicFilter.hpp  \
	antlr/TokenStreamException.hpp  \
	antlr/TokenStreamHiddenTokenFilter.hpp  \
	antlr/TokenStream.hpp  \
	antlr/TokenStreamIOException.hpp  \
	antlr/TokenStreamRecognitionException.hpp  \
	antlr/TokenStreamRetryException.hpp  \
	antlr/TokenStreamSelector.hpp  \
	antlr/TreeParser.hpp  \
	antlr/TreeParserSharedInputState.hpp  \
	src/ANTLRUtil.cpp  \
	src/ASTFactory.cpp  \
	src/ASTNULLType.cpp  \
	src/ASTRefCount.cpp  \
	src/BaseAST.cpp  \
	src/BitSet.cpp  \
	src/CharBuffer.cpp  \
	src/CharScanner.cpp  \
	src/CommonAST.cpp  \
	src/CommonASTWithHiddenTokens.cpp  \
	src/CommonHiddenStreamToken.cpp  \
	src/CommonToken.cpp  \
	src/InputBuffer.cpp  \
	src/LLkParser.cpp  \
	src/MismatchedCharException.cpp  \
	src/MismatchedTokenException.cpp  \
	src/NoViableAltException.cpp  \
	src/NoViableAltForCharException.cpp  \
	src/Parser.cpp  \
	src/RecognitionException.cpp  \
	src/String.cpp  \
	src/TokenBuffer.cpp  \
	src/Token.cpp  \
	src/TokenStreamBasicFilter.cpp  \
	src/TokenStreamHiddenTokenFilter.cpp  \
	src/TokenStreamSelector.cpp  \
	src/TreeParser.cpp

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  libantlr/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  libantlr/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libantlr.a: $(libantlr_a_OBJECTS) $(libantlr_a_DEPENDENCIES) 
	-rm -f libantlr.a
	$(libantlr_a_AR) libantlr.a $(libantlr_a_OBJECTS) $(libantlr_a_LIBADD)
	$(RANLIB) libantlr.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ANTLRUtil.Po
include ./$(DEPDIR)/ASTFactory.Po
include ./$(DEPDIR)/ASTNULLType.Po
include ./$(DEPDIR)/ASTRefCount.Po
include ./$(DEPDIR)/BaseAST.Po
include ./$(DEPDIR)/BitSet.Po
include ./$(DEPDIR)/CharBuffer.Po
include ./$(DEPDIR)/CharScanner.Po
include ./$(DEPDIR)/CommonAST.Po
include ./$(DEPDIR)/CommonASTWithHiddenTokens.Po
include ./$(DEPDIR)/CommonHiddenStreamToken.Po
include ./$(DEPDIR)/CommonToken.Po
include ./$(DEPDIR)/InputBuffer.Po
include ./$(DEPDIR)/LLkParser.Po
include ./$(DEPDIR)/MismatchedCharException.Po
include ./$(DEPDIR)/MismatchedTokenException.Po
include ./$(DEPDIR)/NoViableAltException.Po
include ./$(DEPDIR)/NoViableAltForCharException.Po
include ./$(DEPDIR)/Parser.Po
include ./$(DEPDIR)/RecognitionException.Po
include ./$(DEPDIR)/String.Po
include ./$(DEPDIR)/Token.Po
include ./$(DEPDIR)/TokenBuffer.Po
include ./$(DEPDIR)/TokenStreamBasicFilter.Po
include ./$(DEPDIR)/TokenStreamHiddenTokenFilter.Po
include ./$(DEPDIR)/TokenStreamSelector.Po
include ./$(DEPDIR)/TreeParser.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ANTLRUtil.o: src/ANTLRUtil.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ANTLRUtil.o -MD -MP -MF "$(DEPDIR)/ANTLRUtil.Tpo" -c -o ANTLRUtil.o `test -f 'src/ANTLRUtil.cpp' || echo '$(srcdir)/'`src/ANTLRUtil.cpp; \
	then mv -f "$(DEPDIR)/ANTLRUtil.Tpo" "$(DEPDIR)/ANTLRUtil.Po"; else rm -f "$(DEPDIR)/ANTLRUtil.Tpo"; exit 1; fi
#	source='src/ANTLRUtil.cpp' object='ANTLRUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ANTLRUtil.o `test -f 'src/ANTLRUtil.cpp' || echo '$(srcdir)/'`src/ANTLRUtil.cpp

ANTLRUtil.obj: src/ANTLRUtil.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ANTLRUtil.obj -MD -MP -MF "$(DEPDIR)/ANTLRUtil.Tpo" -c -o ANTLRUtil.obj `if test -f 'src/ANTLRUtil.cpp'; then $(CYGPATH_W) 'src/ANTLRUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ANTLRUtil.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ANTLRUtil.Tpo" "$(DEPDIR)/ANTLRUtil.Po"; else rm -f "$(DEPDIR)/ANTLRUtil.Tpo"; exit 1; fi
#	source='src/ANTLRUtil.cpp' object='ANTLRUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ANTLRUtil.obj `if test -f 'src/ANTLRUtil.cpp'; then $(CYGPATH_W) 'src/ANTLRUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ANTLRUtil.cpp'; fi`

ASTFactory.o: src/ASTFactory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ASTFactory.o -MD -MP -MF "$(DEPDIR)/ASTFactory.Tpo" -c -o ASTFactory.o `test -f 'src/ASTFactory.cpp' || echo '$(srcdir)/'`src/ASTFactory.cpp; \
	then mv -f "$(DEPDIR)/ASTFactory.Tpo" "$(DEPDIR)/ASTFactory.Po"; else rm -f "$(DEPDIR)/ASTFactory.Tpo"; exit 1; fi
#	source='src/ASTFactory.cpp' object='ASTFactory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ASTFactory.o `test -f 'src/ASTFactory.cpp' || echo '$(srcdir)/'`src/ASTFactory.cpp

ASTFactory.obj: src/ASTFactory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ASTFactory.obj -MD -MP -MF "$(DEPDIR)/ASTFactory.Tpo" -c -o ASTFactory.obj `if test -f 'src/ASTFactory.cpp'; then $(CYGPATH_W) 'src/ASTFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ASTFactory.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ASTFactory.Tpo" "$(DEPDIR)/ASTFactory.Po"; else rm -f "$(DEPDIR)/ASTFactory.Tpo"; exit 1; fi
#	source='src/ASTFactory.cpp' object='ASTFactory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ASTFactory.obj `if test -f 'src/ASTFactory.cpp'; then $(CYGPATH_W) 'src/ASTFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ASTFactory.cpp'; fi`

ASTNULLType.o: src/ASTNULLType.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ASTNULLType.o -MD -MP -MF "$(DEPDIR)/ASTNULLType.Tpo" -c -o ASTNULLType.o `test -f 'src/ASTNULLType.cpp' || echo '$(srcdir)/'`src/ASTNULLType.cpp; \
	then mv -f "$(DEPDIR)/ASTNULLType.Tpo" "$(DEPDIR)/ASTNULLType.Po"; else rm -f "$(DEPDIR)/ASTNULLType.Tpo"; exit 1; fi
#	source='src/ASTNULLType.cpp' object='ASTNULLType.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ASTNULLType.o `test -f 'src/ASTNULLType.cpp' || echo '$(srcdir)/'`src/ASTNULLType.cpp

ASTNULLType.obj: src/ASTNULLType.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ASTNULLType.obj -MD -MP -MF "$(DEPDIR)/ASTNULLType.Tpo" -c -o ASTNULLType.obj `if test -f 'src/ASTNULLType.cpp'; then $(CYGPATH_W) 'src/ASTNULLType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ASTNULLType.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ASTNULLType.Tpo" "$(DEPDIR)/ASTNULLType.Po"; else rm -f "$(DEPDIR)/ASTNULLType.Tpo"; exit 1; fi
#	source='src/ASTNULLType.cpp' object='ASTNULLType.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ASTNULLType.obj `if test -f 'src/ASTNULLType.cpp'; then $(CYGPATH_W) 'src/ASTNULLType.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ASTNULLType.cpp'; fi`

ASTRefCount.o: src/ASTRefCount.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ASTRefCount.o -MD -MP -MF "$(DEPDIR)/ASTRefCount.Tpo" -c -o ASTRefCount.o `test -f 'src/ASTRefCount.cpp' || echo '$(srcdir)/'`src/ASTRefCount.cpp; \
	then mv -f "$(DEPDIR)/ASTRefCount.Tpo" "$(DEPDIR)/ASTRefCount.Po"; else rm -f "$(DEPDIR)/ASTRefCount.Tpo"; exit 1; fi
#	source='src/ASTRefCount.cpp' object='ASTRefCount.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ASTRefCount.o `test -f 'src/ASTRefCount.cpp' || echo '$(srcdir)/'`src/ASTRefCount.cpp

ASTRefCount.obj: src/ASTRefCount.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ASTRefCount.obj -MD -MP -MF "$(DEPDIR)/ASTRefCount.Tpo" -c -o ASTRefCount.obj `if test -f 'src/ASTRefCount.cpp'; then $(CYGPATH_W) 'src/ASTRefCount.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ASTRefCount.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ASTRefCount.Tpo" "$(DEPDIR)/ASTRefCount.Po"; else rm -f "$(DEPDIR)/ASTRefCount.Tpo"; exit 1; fi
#	source='src/ASTRefCount.cpp' object='ASTRefCount.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ASTRefCount.obj `if test -f 'src/ASTRefCount.cpp'; then $(CYGPATH_W) 'src/ASTRefCount.cpp'; else $(CYGPATH_W) '$(srcdir)/src/ASTRefCount.cpp'; fi`

BaseAST.o: src/BaseAST.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BaseAST.o -MD -MP -MF "$(DEPDIR)/BaseAST.Tpo" -c -o BaseAST.o `test -f 'src/BaseAST.cpp' || echo '$(srcdir)/'`src/BaseAST.cpp; \
	then mv -f "$(DEPDIR)/BaseAST.Tpo" "$(DEPDIR)/BaseAST.Po"; else rm -f "$(DEPDIR)/BaseAST.Tpo"; exit 1; fi
#	source='src/BaseAST.cpp' object='BaseAST.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BaseAST.o `test -f 'src/BaseAST.cpp' || echo '$(srcdir)/'`src/BaseAST.cpp

BaseAST.obj: src/BaseAST.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BaseAST.obj -MD -MP -MF "$(DEPDIR)/BaseAST.Tpo" -c -o BaseAST.obj `if test -f 'src/BaseAST.cpp'; then $(CYGPATH_W) 'src/BaseAST.cpp'; else $(CYGPATH_W) '$(srcdir)/src/BaseAST.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BaseAST.Tpo" "$(DEPDIR)/BaseAST.Po"; else rm -f "$(DEPDIR)/BaseAST.Tpo"; exit 1; fi
#	source='src/BaseAST.cpp' object='BaseAST.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BaseAST.obj `if test -f 'src/BaseAST.cpp'; then $(CYGPATH_W) 'src/BaseAST.cpp'; else $(CYGPATH_W) '$(srcdir)/src/BaseAST.cpp'; fi`

BitSet.o: src/BitSet.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BitSet.o -MD -MP -MF "$(DEPDIR)/BitSet.Tpo" -c -o BitSet.o `test -f 'src/BitSet.cpp' || echo '$(srcdir)/'`src/BitSet.cpp; \
	then mv -f "$(DEPDIR)/BitSet.Tpo" "$(DEPDIR)/BitSet.Po"; else rm -f "$(DEPDIR)/BitSet.Tpo"; exit 1; fi
#	source='src/BitSet.cpp' object='BitSet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BitSet.o `test -f 'src/BitSet.cpp' || echo '$(srcdir)/'`src/BitSet.cpp

BitSet.obj: src/BitSet.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BitSet.obj -MD -MP -MF "$(DEPDIR)/BitSet.Tpo" -c -o BitSet.obj `if test -f 'src/BitSet.cpp'; then $(CYGPATH_W) 'src/BitSet.cpp'; else $(CYGPATH_W) '$(srcdir)/src/BitSet.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BitSet.Tpo" "$(DEPDIR)/BitSet.Po"; else rm -f "$(DEPDIR)/BitSet.Tpo"; exit 1; fi
#	source='src/BitSet.cpp' object='BitSet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BitSet.obj `if test -f 'src/BitSet.cpp'; then $(CYGPATH_W) 'src/BitSet.cpp'; else $(CYGPATH_W) '$(srcdir)/src/BitSet.cpp'; fi`

CharBuffer.o: src/CharBuffer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharBuffer.o -MD -MP -MF "$(DEPDIR)/CharBuffer.Tpo" -c -o CharBuffer.o `test -f 'src/CharBuffer.cpp' || echo '$(srcdir)/'`src/CharBuffer.cpp; \
	then mv -f "$(DEPDIR)/CharBuffer.Tpo" "$(DEPDIR)/CharBuffer.Po"; else rm -f "$(DEPDIR)/CharBuffer.Tpo"; exit 1; fi
#	source='src/CharBuffer.cpp' object='CharBuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharBuffer.o `test -f 'src/CharBuffer.cpp' || echo '$(srcdir)/'`src/CharBuffer.cpp

CharBuffer.obj: src/CharBuffer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharBuffer.obj -MD -MP -MF "$(DEPDIR)/CharBuffer.Tpo" -c -o CharBuffer.obj `if test -f 'src/CharBuffer.cpp'; then $(CYGPATH_W) 'src/CharBuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CharBuffer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CharBuffer.Tpo" "$(DEPDIR)/CharBuffer.Po"; else rm -f "$(DEPDIR)/CharBuffer.Tpo"; exit 1; fi
#	source='src/CharBuffer.cpp' object='CharBuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharBuffer.obj `if test -f 'src/CharBuffer.cpp'; then $(CYGPATH_W) 'src/CharBuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CharBuffer.cpp'; fi`

CharScanner.o: src/CharScanner.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharScanner.o -MD -MP -MF "$(DEPDIR)/CharScanner.Tpo" -c -o CharScanner.o `test -f 'src/CharScanner.cpp' || echo '$(srcdir)/'`src/CharScanner.cpp; \
	then mv -f "$(DEPDIR)/CharScanner.Tpo" "$(DEPDIR)/CharScanner.Po"; else rm -f "$(DEPDIR)/CharScanner.Tpo"; exit 1; fi
#	source='src/CharScanner.cpp' object='CharScanner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharScanner.o `test -f 'src/CharScanner.cpp' || echo '$(srcdir)/'`src/CharScanner.cpp

CharScanner.obj: src/CharScanner.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharScanner.obj -MD -MP -MF "$(DEPDIR)/CharScanner.Tpo" -c -o CharScanner.obj `if test -f 'src/CharScanner.cpp'; then $(CYGPATH_W) 'src/CharScanner.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CharScanner.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CharScanner.Tpo" "$(DEPDIR)/CharScanner.Po"; else rm -f "$(DEPDIR)/CharScanner.Tpo"; exit 1; fi
#	source='src/CharScanner.cpp' object='CharScanner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharScanner.obj `if test -f 'src/CharScanner.cpp'; then $(CYGPATH_W) 'src/CharScanner.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CharScanner.cpp'; fi`

CommonAST.o: src/CommonAST.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonAST.o -MD -MP -MF "$(DEPDIR)/CommonAST.Tpo" -c -o CommonAST.o `test -f 'src/CommonAST.cpp' || echo '$(srcdir)/'`src/CommonAST.cpp; \
	then mv -f "$(DEPDIR)/CommonAST.Tpo" "$(DEPDIR)/CommonAST.Po"; else rm -f "$(DEPDIR)/CommonAST.Tpo"; exit 1; fi
#	source='src/CommonAST.cpp' object='CommonAST.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonAST.o `test -f 'src/CommonAST.cpp' || echo '$(srcdir)/'`src/CommonAST.cpp

CommonAST.obj: src/CommonAST.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonAST.obj -MD -MP -MF "$(DEPDIR)/CommonAST.Tpo" -c -o CommonAST.obj `if test -f 'src/CommonAST.cpp'; then $(CYGPATH_W) 'src/CommonAST.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonAST.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CommonAST.Tpo" "$(DEPDIR)/CommonAST.Po"; else rm -f "$(DEPDIR)/CommonAST.Tpo"; exit 1; fi
#	source='src/CommonAST.cpp' object='CommonAST.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonAST.obj `if test -f 'src/CommonAST.cpp'; then $(CYGPATH_W) 'src/CommonAST.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonAST.cpp'; fi`

CommonASTWithHiddenTokens.o: src/CommonASTWithHiddenTokens.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonASTWithHiddenTokens.o -MD -MP -MF "$(DEPDIR)/CommonASTWithHiddenTokens.Tpo" -c -o CommonASTWithHiddenTokens.o `test -f 'src/CommonASTWithHiddenTokens.cpp' || echo '$(srcdir)/'`src/CommonASTWithHiddenTokens.cpp; \
	then mv -f "$(DEPDIR)/CommonASTWithHiddenTokens.Tpo" "$(DEPDIR)/CommonASTWithHiddenTokens.Po"; else rm -f "$(DEPDIR)/CommonASTWithHiddenTokens.Tpo"; exit 1; fi
#	source='src/CommonASTWithHiddenTokens.cpp' object='CommonASTWithHiddenTokens.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonASTWithHiddenTokens.o `test -f 'src/CommonASTWithHiddenTokens.cpp' || echo '$(srcdir)/'`src/CommonASTWithHiddenTokens.cpp

CommonASTWithHiddenTokens.obj: src/CommonASTWithHiddenTokens.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonASTWithHiddenTokens.obj -MD -MP -MF "$(DEPDIR)/CommonASTWithHiddenTokens.Tpo" -c -o CommonASTWithHiddenTokens.obj `if test -f 'src/CommonASTWithHiddenTokens.cpp'; then $(CYGPATH_W) 'src/CommonASTWithHiddenTokens.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonASTWithHiddenTokens.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CommonASTWithHiddenTokens.Tpo" "$(DEPDIR)/CommonASTWithHiddenTokens.Po"; else rm -f "$(DEPDIR)/CommonASTWithHiddenTokens.Tpo"; exit 1; fi
#	source='src/CommonASTWithHiddenTokens.cpp' object='CommonASTWithHiddenTokens.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonASTWithHiddenTokens.obj `if test -f 'src/CommonASTWithHiddenTokens.cpp'; then $(CYGPATH_W) 'src/CommonASTWithHiddenTokens.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonASTWithHiddenTokens.cpp'; fi`

CommonHiddenStreamToken.o: src/CommonHiddenStreamToken.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonHiddenStreamToken.o -MD -MP -MF "$(DEPDIR)/CommonHiddenStreamToken.Tpo" -c -o CommonHiddenStreamToken.o `test -f 'src/CommonHiddenStreamToken.cpp' || echo '$(srcdir)/'`src/CommonHiddenStreamToken.cpp; \
	then mv -f "$(DEPDIR)/CommonHiddenStreamToken.Tpo" "$(DEPDIR)/CommonHiddenStreamToken.Po"; else rm -f "$(DEPDIR)/CommonHiddenStreamToken.Tpo"; exit 1; fi
#	source='src/CommonHiddenStreamToken.cpp' object='CommonHiddenStreamToken.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonHiddenStreamToken.o `test -f 'src/CommonHiddenStreamToken.cpp' || echo '$(srcdir)/'`src/CommonHiddenStreamToken.cpp

CommonHiddenStreamToken.obj: src/CommonHiddenStreamToken.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonHiddenStreamToken.obj -MD -MP -MF "$(DEPDIR)/CommonHiddenStreamToken.Tpo" -c -o CommonHiddenStreamToken.obj `if test -f 'src/CommonHiddenStreamToken.cpp'; then $(CYGPATH_W) 'src/CommonHiddenStreamToken.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonHiddenStreamToken.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CommonHiddenStreamToken.Tpo" "$(DEPDIR)/CommonHiddenStreamToken.Po"; else rm -f "$(DEPDIR)/CommonHiddenStreamToken.Tpo"; exit 1; fi
#	source='src/CommonHiddenStreamToken.cpp' object='CommonHiddenStreamToken.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonHiddenStreamToken.obj `if test -f 'src/CommonHiddenStreamToken.cpp'; then $(CYGPATH_W) 'src/CommonHiddenStreamToken.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonHiddenStreamToken.cpp'; fi`

CommonToken.o: src/CommonToken.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonToken.o -MD -MP -MF "$(DEPDIR)/CommonToken.Tpo" -c -o CommonToken.o `test -f 'src/CommonToken.cpp' || echo '$(srcdir)/'`src/CommonToken.cpp; \
	then mv -f "$(DEPDIR)/CommonToken.Tpo" "$(DEPDIR)/CommonToken.Po"; else rm -f "$(DEPDIR)/CommonToken.Tpo"; exit 1; fi
#	source='src/CommonToken.cpp' object='CommonToken.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonToken.o `test -f 'src/CommonToken.cpp' || echo '$(srcdir)/'`src/CommonToken.cpp

CommonToken.obj: src/CommonToken.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommonToken.obj -MD -MP -MF "$(DEPDIR)/CommonToken.Tpo" -c -o CommonToken.obj `if test -f 'src/CommonToken.cpp'; then $(CYGPATH_W) 'src/CommonToken.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonToken.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CommonToken.Tpo" "$(DEPDIR)/CommonToken.Po"; else rm -f "$(DEPDIR)/CommonToken.Tpo"; exit 1; fi
#	source='src/CommonToken.cpp' object='CommonToken.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommonToken.obj `if test -f 'src/CommonToken.cpp'; then $(CYGPATH_W) 'src/CommonToken.cpp'; else $(CYGPATH_W) '$(srcdir)/src/CommonToken.cpp'; fi`

InputBuffer.o: src/InputBuffer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputBuffer.o -MD -MP -MF "$(DEPDIR)/InputBuffer.Tpo" -c -o InputBuffer.o `test -f 'src/InputBuffer.cpp' || echo '$(srcdir)/'`src/InputBuffer.cpp; \
	then mv -f "$(DEPDIR)/InputBuffer.Tpo" "$(DEPDIR)/InputBuffer.Po"; else rm -f "$(DEPDIR)/InputBuffer.Tpo"; exit 1; fi
#	source='src/InputBuffer.cpp' object='InputBuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputBuffer.o `test -f 'src/InputBuffer.cpp' || echo '$(srcdir)/'`src/InputBuffer.cpp

InputBuffer.obj: src/InputBuffer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputBuffer.obj -MD -MP -MF "$(DEPDIR)/InputBuffer.Tpo" -c -o InputBuffer.obj `if test -f 'src/InputBuffer.cpp'; then $(CYGPATH_W) 'src/InputBuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/InputBuffer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InputBuffer.Tpo" "$(DEPDIR)/InputBuffer.Po"; else rm -f "$(DEPDIR)/InputBuffer.Tpo"; exit 1; fi
#	source='src/InputBuffer.cpp' object='InputBuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputBuffer.obj `if test -f 'src/InputBuffer.cpp'; then $(CYGPATH_W) 'src/InputBuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/InputBuffer.cpp'; fi`

LLkParser.o: src/LLkParser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LLkParser.o -MD -MP -MF "$(DEPDIR)/LLkParser.Tpo" -c -o LLkParser.o `test -f 'src/LLkParser.cpp' || echo '$(srcdir)/'`src/LLkParser.cpp; \
	then mv -f "$(DEPDIR)/LLkParser.Tpo" "$(DEPDIR)/LLkParser.Po"; else rm -f "$(DEPDIR)/LLkParser.Tpo"; exit 1; fi
#	source='src/LLkParser.cpp' object='LLkParser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LLkParser.o `test -f 'src/LLkParser.cpp' || echo '$(srcdir)/'`src/LLkParser.cpp

LLkParser.obj: src/LLkParser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LLkParser.obj -MD -MP -MF "$(DEPDIR)/LLkParser.Tpo" -c -o LLkParser.obj `if test -f 'src/LLkParser.cpp'; then $(CYGPATH_W) 'src/LLkParser.cpp'; else $(CYGPATH_W) '$(srcdir)/src/LLkParser.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LLkParser.Tpo" "$(DEPDIR)/LLkParser.Po"; else rm -f "$(DEPDIR)/LLkParser.Tpo"; exit 1; fi
#	source='src/LLkParser.cpp' object='LLkParser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LLkParser.obj `if test -f 'src/LLkParser.cpp'; then $(CYGPATH_W) 'src/LLkParser.cpp'; else $(CYGPATH_W) '$(srcdir)/src/LLkParser.cpp'; fi`

MismatchedCharException.o: src/MismatchedCharException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MismatchedCharException.o -MD -MP -MF "$(DEPDIR)/MismatchedCharException.Tpo" -c -o MismatchedCharException.o `test -f 'src/MismatchedCharException.cpp' || echo '$(srcdir)/'`src/MismatchedCharException.cpp; \
	then mv -f "$(DEPDIR)/MismatchedCharException.Tpo" "$(DEPDIR)/MismatchedCharException.Po"; else rm -f "$(DEPDIR)/MismatchedCharException.Tpo"; exit 1; fi
#	source='src/MismatchedCharException.cpp' object='MismatchedCharException.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MismatchedCharException.o `test -f 'src/MismatchedCharException.cpp' || echo '$(srcdir)/'`src/MismatchedCharException.cpp

MismatchedCharException.obj: src/MismatchedCharException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MismatchedCharException.obj -MD -MP -MF "$(DEPDIR)/MismatchedCharException.Tpo" -c -o MismatchedCharException.obj `if test -f 'src/MismatchedCharException.cpp'; then $(CYGPATH_W) 'src/MismatchedCharException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/MismatchedCharException.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MismatchedCharException.Tpo" "$(DEPDIR)/MismatchedCharException.Po"; else rm -f "$(DEPDIR)/MismatchedCharException.Tpo"; exit 1; fi
#	source='src/MismatchedCharException.cpp' object='MismatchedCharException.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MismatchedCharException.obj `if test -f 'src/MismatchedCharException.cpp'; then $(CYGPATH_W) 'src/MismatchedCharException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/MismatchedCharException.cpp'; fi`

MismatchedTokenException.o: src/MismatchedTokenException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MismatchedTokenException.o -MD -MP -MF "$(DEPDIR)/MismatchedTokenException.Tpo" -c -o MismatchedTokenException.o `test -f 'src/MismatchedTokenException.cpp' || echo '$(srcdir)/'`src/MismatchedTokenException.cpp; \
	then mv -f "$(DEPDIR)/MismatchedTokenException.Tpo" "$(DEPDIR)/MismatchedTokenException.Po"; else rm -f "$(DEPDIR)/MismatchedTokenException.Tpo"; exit 1; fi
#	source='src/MismatchedTokenException.cpp' object='MismatchedTokenException.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MismatchedTokenException.o `test -f 'src/MismatchedTokenException.cpp' || echo '$(srcdir)/'`src/MismatchedTokenException.cpp

MismatchedTokenException.obj: src/MismatchedTokenException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MismatchedTokenException.obj -MD -MP -MF "$(DEPDIR)/MismatchedTokenException.Tpo" -c -o MismatchedTokenException.obj `if test -f 'src/MismatchedTokenException.cpp'; then $(CYGPATH_W) 'src/MismatchedTokenException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/MismatchedTokenException.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MismatchedTokenException.Tpo" "$(DEPDIR)/MismatchedTokenException.Po"; else rm -f "$(DEPDIR)/MismatchedTokenException.Tpo"; exit 1; fi
#	source='src/MismatchedTokenException.cpp' object='MismatchedTokenException.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MismatchedTokenException.obj `if test -f 'src/MismatchedTokenException.cpp'; then $(CYGPATH_W) 'src/MismatchedTokenException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/MismatchedTokenException.cpp'; fi`

NoViableAltException.o: src/NoViableAltException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NoViableAltException.o -MD -MP -MF "$(DEPDIR)/NoViableAltException.Tpo" -c -o NoViableAltException.o `test -f 'src/NoViableAltException.cpp' || echo '$(srcdir)/'`src/NoViableAltException.cpp; \
	then mv -f "$(DEPDIR)/NoViableAltException.Tpo" "$(DEPDIR)/NoViableAltException.Po"; else rm -f "$(DEPDIR)/NoViableAltException.Tpo"; exit 1; fi
#	source='src/NoViableAltException.cpp' object='NoViableAltException.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NoViableAltException.o `test -f 'src/NoViableAltException.cpp' || echo '$(srcdir)/'`src/NoViableAltException.cpp

NoViableAltException.obj: src/NoViableAltException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NoViableAltException.obj -MD -MP -MF "$(DEPDIR)/NoViableAltException.Tpo" -c -o NoViableAltException.obj `if test -f 'src/NoViableAltException.cpp'; then $(CYGPATH_W) 'src/NoViableAltException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/NoViableAltException.cpp'; fi`; \
	then mv -f "$(DEPDIR)/NoViableAltException.Tpo" "$(DEPDIR)/NoViableAltException.Po"; else rm -f "$(DEPDIR)/NoViableAltException.Tpo"; exit 1; fi
#	source='src/NoViableAltException.cpp' object='NoViableAltException.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NoViableAltException.obj `if test -f 'src/NoViableAltException.cpp'; then $(CYGPATH_W) 'src/NoViableAltException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/NoViableAltException.cpp'; fi`

NoViableAltForCharException.o: src/NoViableAltForCharException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NoViableAltForCharException.o -MD -MP -MF "$(DEPDIR)/NoViableAltForCharException.Tpo" -c -o NoViableAltForCharException.o `test -f 'src/NoViableAltForCharException.cpp' || echo '$(srcdir)/'`src/NoViableAltForCharException.cpp; \
	then mv -f "$(DEPDIR)/NoViableAltForCharException.Tpo" "$(DEPDIR)/NoViableAltForCharException.Po"; else rm -f "$(DEPDIR)/NoViableAltForCharException.Tpo"; exit 1; fi
#	source='src/NoViableAltForCharException.cpp' object='NoViableAltForCharException.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NoViableAltForCharException.o `test -f 'src/NoViableAltForCharException.cpp' || echo '$(srcdir)/'`src/NoViableAltForCharException.cpp

NoViableAltForCharException.obj: src/NoViableAltForCharException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NoViableAltForCharException.obj -MD -MP -MF "$(DEPDIR)/NoViableAltForCharException.Tpo" -c -o NoViableAltForCharException.obj `if test -f 'src/NoViableAltForCharException.cpp'; then $(CYGPATH_W) 'src/NoViableAltForCharException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/NoViableAltForCharException.cpp'; fi`; \
	then mv -f "$(DEPDIR)/NoViableAltForCharException.Tpo" "$(DEPDIR)/NoViableAltForCharException.Po"; else rm -f "$(DEPDIR)/NoViableAltForCharException.Tpo"; exit 1; fi
#	source='src/NoViableAltForCharException.cpp' object='NoViableAltForCharException.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NoViableAltForCharException.obj `if test -f 'src/NoViableAltForCharException.cpp'; then $(CYGPATH_W) 'src/NoViableAltForCharException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/NoViableAltForCharException.cpp'; fi`

Parser.o: src/Parser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Parser.o -MD -MP -MF "$(DEPDIR)/Parser.Tpo" -c -o Parser.o `test -f 'src/Parser.cpp' || echo '$(srcdir)/'`src/Parser.cpp; \
	then mv -f "$(DEPDIR)/Parser.Tpo" "$(DEPDIR)/Parser.Po"; else rm -f "$(DEPDIR)/Parser.Tpo"; exit 1; fi
#	source='src/Parser.cpp' object='Parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Parser.o `test -f 'src/Parser.cpp' || echo '$(srcdir)/'`src/Parser.cpp

Parser.obj: src/Parser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Parser.obj -MD -MP -MF "$(DEPDIR)/Parser.Tpo" -c -o Parser.obj `if test -f 'src/Parser.cpp'; then $(CYGPATH_W) 'src/Parser.cpp'; else $(CYGPATH_W) '$(srcdir)/src/Parser.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Parser.Tpo" "$(DEPDIR)/Parser.Po"; else rm -f "$(DEPDIR)/Parser.Tpo"; exit 1; fi
#	source='src/Parser.cpp' object='Parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Parser.obj `if test -f 'src/Parser.cpp'; then $(CYGPATH_W) 'src/Parser.cpp'; else $(CYGPATH_W) '$(srcdir)/src/Parser.cpp'; fi`

RecognitionException.o: src/RecognitionException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RecognitionException.o -MD -MP -MF "$(DEPDIR)/RecognitionException.Tpo" -c -o RecognitionException.o `test -f 'src/RecognitionException.cpp' || echo '$(srcdir)/'`src/RecognitionException.cpp; \
	then mv -f "$(DEPDIR)/RecognitionException.Tpo" "$(DEPDIR)/RecognitionException.Po"; else rm -f "$(DEPDIR)/RecognitionException.Tpo"; exit 1; fi
#	source='src/RecognitionException.cpp' object='RecognitionException.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RecognitionException.o `test -f 'src/RecognitionException.cpp' || echo '$(srcdir)/'`src/RecognitionException.cpp

RecognitionException.obj: src/RecognitionException.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RecognitionException.obj -MD -MP -MF "$(DEPDIR)/RecognitionException.Tpo" -c -o RecognitionException.obj `if test -f 'src/RecognitionException.cpp'; then $(CYGPATH_W) 'src/RecognitionException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/RecognitionException.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RecognitionException.Tpo" "$(DEPDIR)/RecognitionException.Po"; else rm -f "$(DEPDIR)/RecognitionException.Tpo"; exit 1; fi
#	source='src/RecognitionException.cpp' object='RecognitionException.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RecognitionException.obj `if test -f 'src/RecognitionException.cpp'; then $(CYGPATH_W) 'src/RecognitionException.cpp'; else $(CYGPATH_W) '$(srcdir)/src/RecognitionException.cpp'; fi`

String.o: src/String.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT String.o -MD -MP -MF "$(DEPDIR)/String.Tpo" -c -o String.o `test -f 'src/String.cpp' || echo '$(srcdir)/'`src/String.cpp; \
	then mv -f "$(DEPDIR)/String.Tpo" "$(DEPDIR)/String.Po"; else rm -f "$(DEPDIR)/String.Tpo"; exit 1; fi
#	source='src/String.cpp' object='String.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o String.o `test -f 'src/String.cpp' || echo '$(srcdir)/'`src/String.cpp

String.obj: src/String.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT String.obj -MD -MP -MF "$(DEPDIR)/String.Tpo" -c -o String.obj `if test -f 'src/String.cpp'; then $(CYGPATH_W) 'src/String.cpp'; else $(CYGPATH_W) '$(srcdir)/src/String.cpp'; fi`; \
	then mv -f "$(DEPDIR)/String.Tpo" "$(DEPDIR)/String.Po"; else rm -f "$(DEPDIR)/String.Tpo"; exit 1; fi
#	source='src/String.cpp' object='String.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o String.obj `if test -f 'src/String.cpp'; then $(CYGPATH_W) 'src/String.cpp'; else $(CYGPATH_W) '$(srcdir)/src/String.cpp'; fi`

TokenBuffer.o: src/TokenBuffer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenBuffer.o -MD -MP -MF "$(DEPDIR)/TokenBuffer.Tpo" -c -o TokenBuffer.o `test -f 'src/TokenBuffer.cpp' || echo '$(srcdir)/'`src/TokenBuffer.cpp; \
	then mv -f "$(DEPDIR)/TokenBuffer.Tpo" "$(DEPDIR)/TokenBuffer.Po"; else rm -f "$(DEPDIR)/TokenBuffer.Tpo"; exit 1; fi
#	source='src/TokenBuffer.cpp' object='TokenBuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenBuffer.o `test -f 'src/TokenBuffer.cpp' || echo '$(srcdir)/'`src/TokenBuffer.cpp

TokenBuffer.obj: src/TokenBuffer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenBuffer.obj -MD -MP -MF "$(DEPDIR)/TokenBuffer.Tpo" -c -o TokenBuffer.obj `if test -f 'src/TokenBuffer.cpp'; then $(CYGPATH_W) 'src/TokenBuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenBuffer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TokenBuffer.Tpo" "$(DEPDIR)/TokenBuffer.Po"; else rm -f "$(DEPDIR)/TokenBuffer.Tpo"; exit 1; fi
#	source='src/TokenBuffer.cpp' object='TokenBuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenBuffer.obj `if test -f 'src/TokenBuffer.cpp'; then $(CYGPATH_W) 'src/TokenBuffer.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenBuffer.cpp'; fi`

Token.o: src/Token.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Token.o -MD -MP -MF "$(DEPDIR)/Token.Tpo" -c -o Token.o `test -f 'src/Token.cpp' || echo '$(srcdir)/'`src/Token.cpp; \
	then mv -f "$(DEPDIR)/Token.Tpo" "$(DEPDIR)/Token.Po"; else rm -f "$(DEPDIR)/Token.Tpo"; exit 1; fi
#	source='src/Token.cpp' object='Token.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Token.o `test -f 'src/Token.cpp' || echo '$(srcdir)/'`src/Token.cpp

Token.obj: src/Token.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Token.obj -MD -MP -MF "$(DEPDIR)/Token.Tpo" -c -o Token.obj `if test -f 'src/Token.cpp'; then $(CYGPATH_W) 'src/Token.cpp'; else $(CYGPATH_W) '$(srcdir)/src/Token.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Token.Tpo" "$(DEPDIR)/Token.Po"; else rm -f "$(DEPDIR)/Token.Tpo"; exit 1; fi
#	source='src/Token.cpp' object='Token.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Token.obj `if test -f 'src/Token.cpp'; then $(CYGPATH_W) 'src/Token.cpp'; else $(CYGPATH_W) '$(srcdir)/src/Token.cpp'; fi`

TokenStreamBasicFilter.o: src/TokenStreamBasicFilter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenStreamBasicFilter.o -MD -MP -MF "$(DEPDIR)/TokenStreamBasicFilter.Tpo" -c -o TokenStreamBasicFilter.o `test -f 'src/TokenStreamBasicFilter.cpp' || echo '$(srcdir)/'`src/TokenStreamBasicFilter.cpp; \
	then mv -f "$(DEPDIR)/TokenStreamBasicFilter.Tpo" "$(DEPDIR)/TokenStreamBasicFilter.Po"; else rm -f "$(DEPDIR)/TokenStreamBasicFilter.Tpo"; exit 1; fi
#	source='src/TokenStreamBasicFilter.cpp' object='TokenStreamBasicFilter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenStreamBasicFilter.o `test -f 'src/TokenStreamBasicFilter.cpp' || echo '$(srcdir)/'`src/TokenStreamBasicFilter.cpp

TokenStreamBasicFilter.obj: src/TokenStreamBasicFilter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenStreamBasicFilter.obj -MD -MP -MF "$(DEPDIR)/TokenStreamBasicFilter.Tpo" -c -o TokenStreamBasicFilter.obj `if test -f 'src/TokenStreamBasicFilter.cpp'; then $(CYGPATH_W) 'src/TokenStreamBasicFilter.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenStreamBasicFilter.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TokenStreamBasicFilter.Tpo" "$(DEPDIR)/TokenStreamBasicFilter.Po"; else rm -f "$(DEPDIR)/TokenStreamBasicFilter.Tpo"; exit 1; fi
#	source='src/TokenStreamBasicFilter.cpp' object='TokenStreamBasicFilter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenStreamBasicFilter.obj `if test -f 'src/TokenStreamBasicFilter.cpp'; then $(CYGPATH_W) 'src/TokenStreamBasicFilter.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenStreamBasicFilter.cpp'; fi`

TokenStreamHiddenTokenFilter.o: src/TokenStreamHiddenTokenFilter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenStreamHiddenTokenFilter.o -MD -MP -MF "$(DEPDIR)/TokenStreamHiddenTokenFilter.Tpo" -c -o TokenStreamHiddenTokenFilter.o `test -f 'src/TokenStreamHiddenTokenFilter.cpp' || echo '$(srcdir)/'`src/TokenStreamHiddenTokenFilter.cpp; \
	then mv -f "$(DEPDIR)/TokenStreamHiddenTokenFilter.Tpo" "$(DEPDIR)/TokenStreamHiddenTokenFilter.Po"; else rm -f "$(DEPDIR)/TokenStreamHiddenTokenFilter.Tpo"; exit 1; fi
#	source='src/TokenStreamHiddenTokenFilter.cpp' object='TokenStreamHiddenTokenFilter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenStreamHiddenTokenFilter.o `test -f 'src/TokenStreamHiddenTokenFilter.cpp' || echo '$(srcdir)/'`src/TokenStreamHiddenTokenFilter.cpp

TokenStreamHiddenTokenFilter.obj: src/TokenStreamHiddenTokenFilter.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenStreamHiddenTokenFilter.obj -MD -MP -MF "$(DEPDIR)/TokenStreamHiddenTokenFilter.Tpo" -c -o TokenStreamHiddenTokenFilter.obj `if test -f 'src/TokenStreamHiddenTokenFilter.cpp'; then $(CYGPATH_W) 'src/TokenStreamHiddenTokenFilter.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenStreamHiddenTokenFilter.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TokenStreamHiddenTokenFilter.Tpo" "$(DEPDIR)/TokenStreamHiddenTokenFilter.Po"; else rm -f "$(DEPDIR)/TokenStreamHiddenTokenFilter.Tpo"; exit 1; fi
#	source='src/TokenStreamHiddenTokenFilter.cpp' object='TokenStreamHiddenTokenFilter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenStreamHiddenTokenFilter.obj `if test -f 'src/TokenStreamHiddenTokenFilter.cpp'; then $(CYGPATH_W) 'src/TokenStreamHiddenTokenFilter.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenStreamHiddenTokenFilter.cpp'; fi`

TokenStreamSelector.o: src/TokenStreamSelector.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenStreamSelector.o -MD -MP -MF "$(DEPDIR)/TokenStreamSelector.Tpo" -c -o TokenStreamSelector.o `test -f 'src/TokenStreamSelector.cpp' || echo '$(srcdir)/'`src/TokenStreamSelector.cpp; \
	then mv -f "$(DEPDIR)/TokenStreamSelector.Tpo" "$(DEPDIR)/TokenStreamSelector.Po"; else rm -f "$(DEPDIR)/TokenStreamSelector.Tpo"; exit 1; fi
#	source='src/TokenStreamSelector.cpp' object='TokenStreamSelector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenStreamSelector.o `test -f 'src/TokenStreamSelector.cpp' || echo '$(srcdir)/'`src/TokenStreamSelector.cpp

TokenStreamSelector.obj: src/TokenStreamSelector.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TokenStreamSelector.obj -MD -MP -MF "$(DEPDIR)/TokenStreamSelector.Tpo" -c -o TokenStreamSelector.obj `if test -f 'src/TokenStreamSelector.cpp'; then $(CYGPATH_W) 'src/TokenStreamSelector.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenStreamSelector.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TokenStreamSelector.Tpo" "$(DEPDIR)/TokenStreamSelector.Po"; else rm -f "$(DEPDIR)/TokenStreamSelector.Tpo"; exit 1; fi
#	source='src/TokenStreamSelector.cpp' object='TokenStreamSelector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TokenStreamSelector.obj `if test -f 'src/TokenStreamSelector.cpp'; then $(CYGPATH_W) 'src/TokenStreamSelector.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TokenStreamSelector.cpp'; fi`

TreeParser.o: src/TreeParser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TreeParser.o -MD -MP -MF "$(DEPDIR)/TreeParser.Tpo" -c -o TreeParser.o `test -f 'src/TreeParser.cpp' || echo '$(srcdir)/'`src/TreeParser.cpp; \
	then mv -f "$(DEPDIR)/TreeParser.Tpo" "$(DEPDIR)/TreeParser.Po"; else rm -f "$(DEPDIR)/TreeParser.Tpo"; exit 1; fi
#	source='src/TreeParser.cpp' object='TreeParser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TreeParser.o `test -f 'src/TreeParser.cpp' || echo '$(srcdir)/'`src/TreeParser.cpp

TreeParser.obj: src/TreeParser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TreeParser.obj -MD -MP -MF "$(DEPDIR)/TreeParser.Tpo" -c -o TreeParser.obj `if test -f 'src/TreeParser.cpp'; then $(CYGPATH_W) 'src/TreeParser.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TreeParser.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TreeParser.Tpo" "$(DEPDIR)/TreeParser.Po"; else rm -f "$(DEPDIR)/TreeParser.Tpo"; exit 1; fi
#	source='src/TreeParser.cpp' object='TreeParser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TreeParser.obj `if test -f 'src/TreeParser.cpp'; then $(CYGPATH_W) 'src/TreeParser.cpp'; else $(CYGPATH_W) '$(srcdir)/src/TreeParser.cpp'; fi`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
